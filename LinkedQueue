
public final class LinkedQueue<T> {
	private Node firstNode;
	private Node lastNode;
	
	public LinkedQueue() {
		firstNode = null;
		lastNode = null;
	} // end default constructor
	
	public void enqueue(T newEntry) {
		Node newNode = new Node(newEntry, null);
		if (isEmpty()) {
			firstNode = newNode;
		}
		else {
			lastNode.setNext(newNode);
		} // end if/else statement
		lastNode = newNode;
	} // end enqueue
	
	public T getFront() throws EmptyQueueException {
		if (isEmpty()) {
			throw new EmptyQueueException();
		}
		else {
			return firstNode.getData();
		} // end if/else statement
	} // end getFront
	
	public T dequeue() throws EmptyQueueException {
		T front =getFront();
		firstNode.setData(null);
		firstNode = firstNode.getNext();
		if (firstNode == null) {
			lastNode = null;
		} // end if statement
		return front;
	} // end dequeue
	
	public boolean isEmpty() {
		return (firstNode == null) && (lastNode == null);
	} // end isEmpty
	
	public void clear() {
		firstNode = null;
		lastNode = null;
	} // end clear
	
	private class Node {
		private T data; // queue entry
		private Node next; // link to next node
		
		Node() {
			data = null;
			next = null;
		} // end default constructor
		
		Node(T d, Node n){
			data = d;
			next = n;
		} // end parameterized constructor
		
		public T getData() {
			return data;
		} // end getData
		
		public void setData(T d) {
			data = d;
		} // end setData
		
		public Node getNext() {
			return next;
		} // end getNext
		
		public void setNext(Node n) {
			next = n;
		} // end setNext

	} // end Node

} // end LinkedQueue
